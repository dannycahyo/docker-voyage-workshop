version: "3"

services:
  express-server:
    build: ./server
    container_name: express-server
    ports:
      - "3000:3000"
    env_file:
      - ./server/.env
    networks:
      - elk-network
      - default
    logging:
      driver: gelf
      options:
        gelf-address: "udp://127.0.0.1:12201"
    depends_on:
      - logstash
      - postgres
    restart: always

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.13
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - elk-network
    deploy:
      resources:
        limits:
          memory: 1024M

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.13
    container_name: logstash
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "12201:12201/udp"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    networks:
      - elk-network
    deploy:
      resources:
        limits:
          memory: 512M

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.13
    container_name: kibana
    ports:
      - "5601:5601"
    networks:
      - elk-network
    volumes:
      - ./kibana/config/:/usr/share/kibana/config:ro
    depends_on:
      - logstash
      - elasticsearch

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
    ports:
      - "8080:8080"

  postgres:
    image: postgres
    container_name: my-postgres-db
    env_file:
      - ./server/.env
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

networks:
  elk-network:
    driver: bridge

volumes:
  pg_data:
